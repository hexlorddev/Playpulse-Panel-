version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: playpulse_postgres
    environment:
      POSTGRES_DB: playpulse_panel
      POSTGRES_USER: playpulse
      POSTGRES_PASSWORD: playpulse_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - playpulse_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U playpulse"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: playpulse_redis
    command: redis-server --appendonly yes --requirepass playpulse_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - playpulse_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: playpulse_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=playpulse
      - DB_PASSWORD=playpulse_password
      - DB_NAME=playpulse_panel
      - DB_SSL_MODE=disable
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production
      - PORT=8080
      - ENVIRONMENT=production
      - API_PREFIX=/api/v1
      - FRONTEND_URL=http://localhost:3000
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
    volumes:
      - server_data:/opt/minecraft-servers
      - backup_data:/app/backups
      - upload_data:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock # For container management
    ports:
      - "8080:8080"
    networks:
      - playpulse_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (React App)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: playpulse_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api/v1
      - REACT_APP_WS_URL=ws://localhost:8080/ws
    ports:
      - "3000:80"
    networks:
      - playpulse_network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: playpulse_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - playpulse_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: playpulse_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - playpulse_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: playpulse_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - playpulse_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  playpulse_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  server_data:
    driver: local
  backup_data:
    driver: local
  upload_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local